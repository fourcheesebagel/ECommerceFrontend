@page "/my-cart"

@code {
    string Paying = null!;
    NetcodeHubToast? ToastComponent;
    bool ShowPaymentDialog = false;
    IEnumerable<GetPaymentMethod> PaymentMethods = [];
    List<GetProduct> SelectedProducts = [];
    IEnumerable<GetProduct> Products = [];
    List<ProcessCart> MyCarts = [];

    protected override async Task OnInitializedAsync()
    {
        PaymentMethods = await paymentService.GetPaymentMethods();
        Products = await productService.GetAllAsync();
        string cartString = await browserCookieStorageService.GetAsync(Constant.Cart.Name);
        if (string.IsNullOrEmpty(cartString))
            return;

        MyCarts = JsonSerializer.Deserialize<List<ProcessCart>>(cartString)!;
        if (!MyCarts.Any()) return;
        GetCart();
    }

    void GetCart()
    {
        SelectedProducts?.Clear();
        foreach(var item in MyCarts)
        {
            var product = Products.FirstOrDefault(x => x.Id == item.ProductId);
            if (product != null && !SelectedProducts!.Contains(product))
                SelectedProducts.Add(product);
        }
        SelectedProducts!.OrderBy(x => x.Name);
    }

    int GetProductQuantity(Guid productId) => GetCartItem(productId).Quantity;
    ProcessCart GetCartItem(Guid productId) => MyCarts.FirstOrDefault(x => x.ProductId == productId)!;
    decimal GetProductTotalPrice(Guid productId)
    {
        int quantity = GetProductQuantity(productId);
        decimal price = Products.FirstOrDefault(x => x.Id == productId)!.Price;
        return quantity * price;
    }

    async Task HandleInputChange(ChangeEventArgs e, Guid productId) //for input changes post adding to cart
    {
        int newQuantity = int.Parse(e.Value?.ToString()!);
        MyCarts.FirstOrDefault(x => x.ProductId == productId)!.Quantity = newQuantity;
        await SaveCart(MyCarts);
        GetCart();
        StateHasChanged();
    }

    async Task SaveCart(List<ProcessCart> myCarts) => await browserCookieStorageService.SetAsync(Constant.Cart.Name, JsonSerializer.Serialize(myCarts), 30, "/");

    decimal GrandTotal(List<GetProduct> products)
    {
        decimal grandTotal = 0.00m;
        foreach (var product in products)
            grandTotal += GetProductTotalPrice(product.Id);

        return grandTotal;
    }

    async Task DeleteCartItem(Guid productId)
    {
        var cartItem = GetCartItem(productId);
        MyCarts.Remove(cartItem!);
        var product = SelectedProducts.FirstOrDefault(x => x.Id == productId);
        SelectedProducts.Remove(product!);
        await browserCookieStorageService.RemoveAsync(Constant.Cookie.Name);
        await SaveCart(MyCarts);
        await ToastComponent!.ShowDangerToast("Cart", "Product Deleted");
    }

    [CascadingParameter] public Task<AuthenticationState>? UserAuthState { get; set; }

    async Task Checkout()
    {
        try
        {
            var user = (await UserAuthState!).User;
            if (!user.Identity!.IsAuthenticated)
                NavManager.NavigateTo($"authentication/login/{Constant.Cart.Name}");
            else
                ShowPaymentDialog = true;
        }
        catch
        {
            NavManager.NavigateTo($"authentication/login/{Constant.Cart.Name}");
        }
    }

    async Task SelectedPaymentMethod(GetPaymentMethod paymentMethod)
    {
        if (paymentMethod == null) return;
        Paying = "Processing... please wait";
        var checkout = new Checkout
            {
                PaymentMethodId = paymentMethod.Id,
                Carts = MyCarts
            };
        var (success, paymentLink) = await cartService.Checkout(checkout);
        if (success) 
        {
            Paying = null!;
            NavManager.NavigateTo(paymentLink);
        }
        else
        {
            await ToastComponent!.ShowDangerToast("Checkout", paymentLink);
            return;
        }

        void Cancel() => ShowPaymentDialog = false;
    }
}
